# Use .env file for secrets (copy .env.example to .env and customize)
services:
  mssql:
    image: mcr.microsoft.com/mssql/server:2022-latest
    platform: linux/amd64
    container_name: mssql
    environment:
      ACCEPT_EULA: "Y"
      MSSQL_SA_PASSWORD: "${MSSQL_SA_PASSWORD}"
    ports:
      - "1433:1433"
    volumes:
      - mssql-data:/var/opt/mssql
    healthcheck:
      test: ["CMD-SHELL","/opt/mssql-tools18/bin/sqlcmd -C -S localhost -U sa -P $$MSSQL_SA_PASSWORD -Q 'SELECT 1' || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 10

  api:
    build:
      context: .
      dockerfile: Api/Dockerfile.dev
    container_name: api
    environment:
      ASPNETCORE_URLS: http://0.0.0.0:8080
      ASPNETCORE_ENVIRONMENT: Development
      ConnectionStrings__ReportingDb: "Server=mssql,1433;Database=ReportingDemo;User ID=sa;Password=${MSSQL_SA_PASSWORD};Encrypt=True;TrustServerCertificate=True"
    volumes:
      - ./:/src
      - dotnet-nuget:/root/.nuget/packages
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:8080/health || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 10s
    depends_on:
      mssql:
        condition: service_healthy

  web:
    build:
      context: web
      dockerfile: Dockerfile.dev
    container_name: web
    environment:
      VITE_PROXY_TARGET: http://api:8080
    volumes:
      - ./web:/app
      - web-node-modules:/app/node_modules
    ports:
      - "5173:5173"
    depends_on:
      api:
        condition: service_healthy

volumes:
  mssql-data:
  dotnet-nuget:
  web-node-modules:
